prop.table(table(malaria_data$location)) # percentages for a single column
table(malaria_data$location, malaria_data$year)  # frequencies for multiple columns
sum(is.na(malaria_data)) #checking for missing values in the dataset
library(kableExtra)
missing_values <- colSums(is.na(malaria_data))
kable(missing_values)
hist(malaria_data$prev)
hist(malaria_data$prev, col = "tomato")
hist(malaria_data$prev,
breaks = 10,
col = "steelblue",
border = "red",
main = "Distribution of Malaria Prevalence",
xlab = "Malaria Prevalence",
ylab = "Frequency")
pdf("Histogram Plot.pdf")
hist(malaria_data$prev,
breaks = 10,
col = "steelblue",
border = "red",
main = "Distribution of Malaria Prevalence",
xlab = "Malaria Prevalence",
ylab = "Frequency")
dev.off()
png("Histogram Plot.png")
hist(malaria_data$prev,
breaks = 10,
col = "steelblue",
border = "red",
main = "Distribution of Malaria Prevalence",
xlab = "Malaria Prevalence",
ylab = "Frequency")
dev.off()
pdf("Histogram Plot.pdf")
hist(malaria_data$prev,
breaks = 10,
col = "steelblue",
border = "red",
main = "Distribution of Malaria Prevalence",
xlab = "Malaria Prevalence",
ylab = "Frequency")
dev.off()
png("Histogram Plot.png")
hist(malaria_data$prev,
breaks = 10,
col = "steelblue",
border = "red",
main = "Distribution of Malaria Prevalence",
xlab = "Malaria Prevalence",
ylab = "Frequency")
dev.off()
density <- density(malaria_data$prev)
plot(density)
polygon(density, col="red",border="black")
#Save as PDF in Rstudio
pdf("Kernel Density Plots.pdf", width = 8, height = 6)      # Open PDF device
plot(density)                                               # Create the plot
polygon(density, col="red",border="black")
dev.off()                                                   # Close device & finalize the file
plot(malaria_data$year,malaria_data$positive, type="l", lwd=1, xlab="Year", ylab="Positive Cases", main="A Line plot of Positive Cases across Years")
plot(malaria_data$total, malaria_data$positive,
xlab = "Total",
ylab = "Positive Cases",
main = "A Line Plot Positive Cases against Tota Tests",
type ="l")
counts <- table(malaria_data$year)
counts
barplot(counts, col = "steelblue")
counts <- table(malaria_data$year)
barplot(counts,
col=c("red", "blue", "green"),
main= "Simple Bar chart",
xlab= "Year",
ylab="Frequency")                                        # Close device
#Save as PNG in Rstudio
png("Simple Bar chart.png")                       # Open PNG device
barplot(counts,                                   # Create the plot
col=c("red", "blue", "green"),
main= "Simple Bar chart",
xlab= "Year",
ylab="Frequency")
dev.off()
df <- as.data.frame(table(malaria_data$location))
colnames(df) <- c("location", "freq")
pie(df$freq,                                         #data for the pie chart
df$location,                                     #lables for the slices
col =rainbow(length(df$freq)),                   #colour palette for the slices
main = "Malaria cases Distribution by Location" )
df <- prop.table(table(malaria_data$location))
p1<-pie(df,
labels = paste(names(df), "(", round(df * 100, 1), "%)"),
col = c("7","2","3","4","5"), main = "Pie Chart for Location Categories")
library(plotrix)
df <- prop.table(table(malaria_data$location))
p1<-pie3D(df, labels = paste(names(df), "(", round(df * 100, 1), "%)"), col = c("7","2","3","4","5"), main = "Pie Chart for Location Categories")
pdf("3 D Pie Chart.pdf")
pie3D(df, labels = paste(names(df), "(", round(df * 100, 1), "%)"), col = c("7","2","3","4","5"), main = "Pie Chart for Location Categories")
dev.off()
library(plotly)
df <- as.data.frame(table(malaria_data$location))
colnames(df) <- c("location", "freq")
fig <- plot_ly(df,
labels = ~df$location,
values = ~df$freq,
type = 'pie',
hole = 0.3,                  # Makes a doughnut chart; set to 0 for a full pie chart
textinfo = 'label+percent',  # Shows both labels and percentages
marker = list(colors = colorRampPalette(c('blue', 'green', 'tomato', 'skyblue'))(nrow(df))))
fig
plot(malaria_data$total, malaria_data$positive)
plot(malaria_data$total, malaria_data$positive, col="red")
#Save as JPEG in Rstudio
jpeg("Scatter plot.jpg")                                        # Open JPEG device
plot(malaria_data$total, malaria_data$positive, col="red")      # Create the plot
dev.off()                                                       # Close device
counts <- table(malaria_data$ages,malaria_data$year)
barplot(counts,
col=c("red", "blue", "green"),
main= "Multiple Bar chart of Ages Brackets Across Years",
xlab= "Years",
ylab="Frequency",
legend=rownames(counts), beside=TRUE)
counts <- table(malaria_data$year,malaria_data$ages)
barplot(counts,
col=c("red", "blue", "green"),
main= "Multiple Bar chart of Ages Brackets Across Years",
xlab= "Years",
ylab="Frequency",
legend=rownames(counts), beside=TRUE)
boxplot(malaria_data$prev ~ malaria_data$location)
boxplot(malaria_data$prev ~ malaria_data$location, col="tomato")
#Save as TIFF in Rstudio
tiff("Box-and-Whisker plot.tiff", width = 800, height = 600)          # Open TIFF device
boxplot(malaria_data$prev ~ malaria_data$location, col="tomato")      # create the plot
dev.off ()                                                            # Close device
ggplot(data = malaria_data)
ggplot(data = malaria_data,
aes(x = total, y = positive))
library(ggthemes)
ggplot(data = malaria_data, aes(x = total, y = positive)) +
geom_point()
ggplot(data = malaria_data, aes(x = total, y = positive)) +
geom_point(colour = "tomato")
ggplot(data = malaria_data, aes(x = total, y = positive)) +
geom_point() +
geom_smooth(method = "lm")  # The smooth geom add a smoothed line to the plot
ggplot(data = malaria_data, aes(x = total, y = positive, color = location)) +
geom_point() +
theme_classic()
ggplot(data = malaria_data, aes(x = total, y = positive, color = location)) +
geom_point() +
theme_economist()
ggplot(data = malaria_data, aes(x = total, y = positive, color = location)) +
geom_point() +
facet_wrap(~location) +
theme_bw()
ggplot(data = malaria_data, aes(x = total, y = positive, color = location)) +
geom_point() +
facet_wrap(~year) +
theme_bw()
ggplot(data = malaria_data, aes(x = total, y = positive, color = location)) +
geom_point() +
geom_smooth(method = "lm")  # The smooth geom add a smoothed line to the plo
ggplot(data = malaria_data, aes(x = total, y = positive, color = location)) +
geom_point() +
stat_ellipse() +
theme_classic()
ggplot(data = malaria_data, aes(x= prev))+
geom_histogram(bins = 10, fill = "red", color = "blue")
ggsave("ggplot histogram.pdf")
ggplot(data = malaria_data, aes(x= prev))+
geom_histogram(bins = 10, fill = "red", color = "blue")
ggsave("ggplot histogram.pdf", height = 5, width = 6. dpi = 300)
ggplot(data = malaria_data, aes(x= prev))+
geom_histogram(bins = 10, fill = "red", color = "blue")
ggsave("ggplot histogram.pdf", height = 5, width = 6,dpi = 300)
library(leaflet)
# Sample data
kenya <- read.csv("KenyaMalariaGeo.csv", header = TRUE)
# Create an interactive map with leaflet
leaflet(kenya) %>%
addTiles() %>%
addCircleMarkers(
~longitude, ~latitude,
radius = ~prevalence * 10,
color = "red",
stroke = FALSE,
fillOpacity = 0.5,
label = ~paste0(county, ": ", prevalence)) %>%
addLegend("bottomright",
colors = "red",
labels = "Malaria Prevalence",
title = "Prevalence in Kenya")
data <- read.csv("malaria_survey_data1.csv")
data <- read.csv("malaria_survey_data1.csv")
### Code the Counties and Give their Appropriate Name
data$County <- factor(data$County, levels = c(101, 201, 202, 203, 204, 205, 301, 302, 303, 304, 305, 306,
401, 402, 403, 404, 405, 406, 407, 408, 501, 502, 503, 601, 602,
603, 604, 605, 606, 701, 702, 703, 704, 705, 706, 707, 708, 709,
710, 711, 712, 713, 714, 801, 802, 803, 804),
labels = c("nairobi", "nyandarua", "nyeri", "kirinyaga", "muranga", "kiambu",
"mombasa", "kwale", "kilifi", "tana river", "lamu", "taita taveta",
"marsabit", "isiolo", "meru", "tharaka", "embu", "kitui", "machakos",
"makueni", "garissa", "wajir", "mandera", "siaya", "kisumu", "migori",
"homa bay", "kisii", "nyamira", "turkana", "west pokot", "samburu",
"trans-nzoia", "baringo", "uasin gishu", "elgeyo marakwet", "nandi",
"laikipia", "nakuru", "narok", "kajiado", "kericho", "bomet", "kakamega",
"vihiga", "bungoma", "busia"))
head(data,10)
gps <- read.csv("longitude_latitude.csv")
gps <- read.csv("longitude_latitude.csv")
head(gps,10)
data <- merge(gps, data, by = "County", all.x = TRUE)
head(data)
library(leaflet)
# Create an interactive map with leaflet
leaflet(data) %>%
addTiles() %>%
addCircleMarkers(
~Longitude, ~Latitude,
radius = ~Final_Malaria_Test_Results*3,
color = "red",
stroke = FALSE,
fillOpacity = 0.5,
label = ~paste0(County, ": ", Final_Malaria_Test_Results)) %>%
addLegend("bottomright",
colors = "red",
labels = "Malaria Results",
title = "Malaria Positive Test Results")
?leaflet
data <- read.csv("malaria_survey_data1.csv")
### Code the Counties and Give their Appropriate Name
data$County <- factor(data$County, levels = c(101, 201, 202, 203, 204, 205, 301, 302, 303, 304, 305, 306,
401, 402, 403, 404, 405, 406, 407, 408, 501, 502, 503, 601, 602,
603, 604, 605, 606, 701, 702, 703, 704, 705, 706, 707, 708, 709,
710, 711, 712, 713, 714, 801, 802, 803, 804),
labels = c("nairobi", "nyandarua", "nyeri", "kirinyaga", "muranga", "kiambu",
"mombasa", "kwale", "kilifi", "tana river", "lamu", "taita taveta",
"marsabit", "isiolo", "meru", "tharaka", "embu", "kitui", "machakos",
"makueni", "garissa", "wajir", "mandera", "siaya", "kisumu", "migori",
"homa bay", "kisii", "nyamira", "turkana", "west pokot", "samburu",
"trans-nzoia", "baringo", "uasin gishu", "elgeyo marakwet", "nandi",
"laikipia", "nakuru", "narok", "kajiado", "kericho", "bomet", "kakamega",
"vihiga", "bungoma", "busia"))
head(data,10)
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 4,
fig.width = 8,
message = FALSE,
warning = FALSE,
comment = NA)
setwd("~/TMMS2024")
library(caret) #for training machine learning models
library(psych) ##for description of  data
library(ggplot2) ##for data visualization
library(caretEnsemble)##enables the creation of ensemble models
library(tidyverse) ##for data manipulation
library(rpart) ## for plotting the decision tree (CART)
library(mlbench)  ## For benchmarking ML Models
library(flextable) ## To create and style tables
library(mltools) #for hyperparameter tuning
library(tictoc) #for determining the time taken for a model to run
library(ROSE)  ## for random oversampling
library(smotefamily) ## for smote sampling
library(ROCR) ##For ROC curve
library(pROC) ## For visualizing, smoothing, and comparing ROC curves
library(e1071) ## For statistical modeling and  machine learning tasks
library(class) ## For classification using k-Nearest Neighbors and other methods
library(caTools) ## For splitting data into training and testing sets
library(MASS) ## Provides plotting functions and datasets
library(ISLR) ## for practical applications of statistical learning methods
library(boot) ## Useful for performing bootstrap resampling
library(cvTools) ## Contains functions for cross-validation, bootstrapping, and other resampling methods
mdata = read.csv("final_malaria_survey_data.csv", header = TRUE)
head(mdata)
dim(mdata)      ## View the Dimension of the Data
names(mdata)     ## View the variable/features/column names
#summary(mdata)    ## Descriptive Statistics
describe(mdata)   ## Descriptive Statistics
sum(is.na(mdata))  ## Check for missing data
na.omit(mdata)     ## Remove rows with any missing values
#is.na(mdata$Malaria.Test)  ## checks for missing values in the Malaria.Test column of your data frame
mdata$Malaria.Test <- as.factor(mdata$Malaria.Test)
str(mdata)
plot(mdata$Malaria.Test,
names= c("Negative", "Positive"),
col=c(3,2),
ylim=c(0, 3000), ylab= "Respondent", xlab= "Malaria Diagnosis", main = "Malaria Diagnosis Plot")
#box()
ggplot(mdata, aes(x = Malaria.Test)) +
geom_bar(fill = c("darkgreen","red")) +
labs(x = "Malaria Test",
y = "Respondent",
tittle = "Malaria Diagnosis Results",
caption = "Source: KNBS 2021 Data") +
theme_classic()
ggplot(mdata, aes(x = Malaria.Test)) +
geom_bar(fill = c("darkgreen","red")) +
labs(x = "Malaria Test",
y = "Respondent",
tittle = "Malaria Diagnosis Results",
caption = "Source: KNBS 2021 Data") +
theme_economist()
ggplot(mdata, aes(x = Malaria.Test)) +
geom_bar(fill = c("darkgreen","red")) +
labs(x = "Malaria Test",
y = "Respondent",
tittle = "Malaria Diagnosis Results",
caption = "Source: KNBS 2021 Data") +
theme_economist()
ggplot(mdata, aes(x = Malaria.Test)) +
geom_bar(fill = c("darkgreen","red")) +
labs(x = "Malaria Test",
y = "Respondent",
tittle = "Malaria Diagnosis Results",
caption = "Source: KNBS 2021 Data") +
ggtitle("Malaria Diagnosis Results")+
theme_economist()
ggplot(mdata, aes(x = Malaria.Test)) +
geom_bar(fill = c("darkgreen","red")) +
labs(x = "Malaria Test",
y = "Respondent",
tittle = "Malaria Diagnosis Results",
caption = "Source: KNBS 2021 Data") +
ggtitle("Malaria Diagnosis Results")+
theme_economist()
nzv <- nearZeroVar(mdata[,-14], saveMetrics = TRUE) ## Function called nearZeroVar and captures its output in the variable nzv
nzv
mdata1 <- mdata[, !nzv$nzv] ## Removing features with little to no variation
dim(mdata1)
set.seed(123) ## This line sets the random seed for the analysis
set.seed(123)
index = sample(2, nrow(mdata1),replace =T, prob=c(0.70,0.30))
train = mdata1[index ==1,]
test = mdata1[index ==2,]
dim(train)
dim(test)
models= getModelInfo()
names(models)
control <- trainControl(method="repeatedcv", number=10, repeats=5)
control1 <- trainControl(method = "repeatedcv", number = 10, repeats = 5,
classProbs = TRUE, summaryFunction = twoClassSummary)
control1 <- trainControl(method = "repeatedcv", number = 10, repeats = 5,
classProbs = TRUE, summaryFunction = twoClassSummary)
# --------------------------------------------------------------------------------------------------------------------------------
# Train a Support Vector Machine (SVM) model
# --------------------------------------------------------------------------------------------------------------------------------
set.seed(123)
tic()
SvmModel <- train(Malaria.Test~.,
data=train,
method="svmRadial",
preProcess= c("scale", "center"),
trControl=control,
tuneLength=10,
na.action = na.omit)
toc()
#SvmModel
# --------------------------------------------------------------------------------------------------------------------------------
# Make prediction on test dataset using Trained SVM Model
# --------------------------------------------------------------------------------------------------------------------------------
Svmpred= predict(SvmModel,newdata = test)
# --------------------------------------------------------------------------------------------------------------------------------
# Evaluate SVM model performance metrics
# --------------------------------------------------------------------------------------------------------------------------------
SVM_CM<- confusionMatrix(Svmpred,test$Malaria.Test, positive = "Positive", mode="everything")
SVM_CM
M1 <- SVM_CM$byClass[c(1, 2, 5, 7, 11)]
M1
## ------------------------------------------------------------------------------------------------------------------------------
plot(SvmModel)
SvmModel$results
SvmModel
SvmModel
Svmpred= predict(SvmModel,newdata = test)
# Combine data into a data frame
Ground_truth<- test$Malaria.Test
Predicted <- Svmpred
resultSvm <- data.frame(Ground_truth, Predicted)
resultSvm$Correct <- resultSvm$Ground_truth == resultSvm$Predicted
# Add a column for classification results (correct/incorrect)
resultSVM<- data.frame(test, Svmpred, resultSvm$Correct)
print(resultSvm,150)
SVM_CM<- confusionMatrix(Svmpred,test$Malaria.Test, positive = "Positive", mode="everything")
SVM_CM
M1 <- SVM_CM$byClass[c(1, 2, 5, 7, 11)]
M1
SVM.cM$table
SVM_CM<- confusionMatrix(Svmpred,test$Malaria.Test, positive = "Positive", mode="everything")
SVM_CM
M1 <- SVM_CM$byClass[c(1, 2, 5, 7, 11)]
M1
SVM.CM$table
Svm.CM$table
SVM_CM$table
fourfoldplot(SVM_CM$table, col=c(2,3), main="Imbalanced SVM Confusion Matrix")
plot(varImp(SvmModel, scale=T))
var_imp <-varImp(SvmModel)
var_imp$Variable <- rownames(var_imp)
rownames(var_imp) <- NULL
ggplot(var_imp, aes(x = reorder(Variable, Importance), y = importance)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
xlab("Variable") +
ylab("Importance") +
ggtitle("Feature Importance Plot for SVM Model")
predsvm <- predict(SvmModel, newdata = test, type = "prob")
predsvm
SvmModel
# --------------------------------------------------------------------------------------------------------------------------------
# Make prediction on test dataset using Trained SVM Model
# --------------------------------------------------------------------------------------------------------------------------------
Svmpred= predict(SvmModel,newdata = test)
# --------------------------------------------------------------------------------------------------------------------------------
# Evaluate SVM model performance metrics
# --------------------------------------------------------------------------------------------------------------------------------
SVM_CM<- confusionMatrix(Svmpred,test$Malaria.Test, positive = "Positive", mode="everything")
SVM_CM
M1 <- SVM_CM$byClass[c(1, 2, 5, 7, 11)]
M1
## ------------
# --------------------------------------------------------------------------------------------------------------------------------
# Train a Support Vector Machine (SVM) model
# --------------------------------------------------------------------------------------------------------------------------------
set.seed(123)
tic()
SvmModel <- train(Malaria.Test~.,
data=train,
method="svmRadial",
preProcess= c("scale", "center"),
trControl=control1,
tuneLength=10,
na.action = na.omit)
toc()
#---------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------
# Train a Support Vector Machine (SVM) model
# --------------------------------------------------------------------------------------------------------------------------------
set.seed(123)
tic()
SvmModel <- train(Malaria.Test~.,
data=train,
method="svmRadial",
preProcess= c("scale", "center"),
trControl=control1,
tuneLength=10,
na.action = na.omit)
toc()
#---------------------------------------------------------------------------------------------------------------------------------
SvmModel
# --------------------------------------------------------------------------------------------------------------------------------
# Make prediction on test dataset using Trained SVM Model
# --------------------------------------------------------------------------------------------------------------------------------
Svmpred= predict(SvmModel,newdata = test)
# --------------------------------------------------------------------------------------------------------------------------------
# Evaluate SVM model performance metrics
# --------------------------------------------------------------------------------------------------------------------------------
SVM_CM<- confusionMatrix(Svmpred,test$Malaria.Test, positive = "Positive", mode="everything")
SVM_CM
M1 <- SVM_CM$byClass[c(1, 2, 5, 7, 11)]
M1
## ------------
SvmModel
plot(SvmModel)
SvmModel$results
Svmpred= predict(SvmModel,newdata = test)
# Combine data into a data frame
Ground_truth<- test$Malaria.Test
Predicted <- Svmpred
resultSvm <- data.frame(Ground_truth, Predicted)
resultSvm$Correct <- resultSvm$Ground_truth == resultSvm$Predicted
# Add a column for classification results (correct/incorrect)
resultSVM<- data.frame(test, Svmpred, resultSvm$Correct)
print(resultSvm,150)
SVM_CM<- confusionMatrix(Svmpred,test$Malaria.Test, positive = "Positive", mode="everything")
SVM_CM
M1 <- SVM_CM$byClass[c(1, 2, 5, 7, 11)]
M1
SVM_CM$table
fourfoldplot(SVM_CM$table, col=c(2,3), main="Imbalanced SVM Confusion Matrix")
plot(varImp(SvmModel, scale=T))
var_imp <-varImp(SvmModel)
var_imp$Variable <- rownames(var_imp)
rownames(var_imp) <- NULL
ggplot(var_imp, aes(x = reorder(Variable, Importance), y = importance)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
xlab("Variable") +
ylab("Importance") +
ggtitle("Feature Importance Plot for SVM Model")
predsvm <- predict(SvmModel, newdata = test, type = "prob")
predsvm
pred_svm <- prediction(predsvm[, "Positive"], test$Malaria.Test)
perf_svm <- performance(pred_svm, "tpr", "fpr")
plot(perf_svm, colorize = TRUE, main = "ROC Curve and AUC for Support Vector Machines")
auc_value <- performance(pred_svm, "auc")@y.values[[1]] ### Add AUC value as text on the plot
auc_label <- paste("AUC =", round(auc_value, 2))
text(0.5, 0.3, auc_label, col = "blue", cex = 1.5)  # Adjust position
knitr::opts_chunk$set(
echo = TRUE,
#fig.height = 4,
#fig.width = 7,
message = FALSE,
warning = FALSE,
comment = NA)
library(haven)
library(foreign)
dattta <- read
library(haven)
library(foreign)
dattta <- read_dta("https://statistics.knbs.or.ke/nada/index.php/catalog/111/download/490.dta")
